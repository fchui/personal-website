# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  webserver:
      image: nginx:mainline-alpine
      container_name: webserver
      restart: unless-stopped
      ports:
        - 80:80
        - 443:443
      volumes:
        - web-root:/var/www/html
        - ./nginx-conf:/etc/nginx/conf.d
        - certbot-etc:/etc/letsencrypt
        - certbot-var:/var/lib/letsencrypt
        - dhparam:/etc/ssl/certs
      depends_on:
        - frontend
        - backend
      networks:
        - public
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-root:/var/www/html
    depends_on:
      - webserver
    command: certonly --webroot --webroot-path=/var/www/html --email fchui@fykchui.com --agree-tos --no-eff-email --reinstall -d login.fykchui.com -d www.login.fykchui.com
  backend:
    build:
      args:
      - NODE_ENV=development
      context: backend
      target: development
    container_name: backend
    environment:
      NODE_ENV: development
      POSTGRES_HOST: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/db-password
      POSTGRES_DB: projects
      POSTGRES_PORT: 5432
    secrets:
      - db-password
    volumes:
      - ./backend/src:/code/src:ro
      - ./backend/package.json:/code/package.json
      - ./backend/package-lock.json:/code/package-lock.json
      - back-notused:/opt/app/node_modules
    networks:
      - public
      - private
    depends_on:
      - db
  db:
    image: postgres
    container_name: db
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - ./db/backupProjects.sql:/docker-entrypoint-initdb.d/backupProjects.sql
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    ports:
      - 5432:5432
    expose:
      - 5432
    networks:
      - private
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
  frontend:
    build:
      context: frontend
      target: final
    container_name: frontend
    environment:
      NODE_ENV: final
      PORT: 8000
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
      - /usr/src/app/dist
    depends_on:
      - backend
    networks:
      - public
networks:
  public:
  private:
volumes:
  back-notused:
  db-data:
  certbot-etc:
  certbot-var:
  web-root:
    driver: local
    driver_opts:
      type: none
      device: ./frontend/dist/
      o: bind
  dhparam:
    driver: local
    driver_opts:
      type: none
      device: ./dhparam/
      o: bind
secrets:
  db-password:
    file: db/password.txt